/*
 * This file is generated by jOOQ.
 */
package ru.tinkoff.edu.java.scrapper.service.impl.jooq.codegen.public_.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.tinkoff.edu.java.scrapper.service.impl.jooq.codegen.public_.Keys;
import ru.tinkoff.edu.java.scrapper.service.impl.jooq.codegen.public_.Public;
import ru.tinkoff.edu.java.scrapper.service.impl.jooq.codegen.public_.tables.records.GithubRepositoryIssueRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GithubRepositoryIssue extends TableImpl<GithubRepositoryIssueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.github_repository_issue</code>
     */
    public static final GithubRepositoryIssue GITHUB_REPOSITORY_ISSUE = new GithubRepositoryIssue();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<GithubRepositoryIssueRecord> getRecordType() {
        return GithubRepositoryIssueRecord.class;
    }

    /**
     * The column <code>public.github_repository_issue.id</code>.
     */
    public final TableField<GithubRepositoryIssueRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.github_repository_issue.link_id</code>.
     */
    public final TableField<GithubRepositoryIssueRecord, Long> LINK_ID = createField(DSL.name("link_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.github_repository_issue.state</code>.
     */
    public final TableField<GithubRepositoryIssueRecord, String> STATE = createField(DSL.name("state"), SQLDataType.CLOB.nullable(false), this, "");

    private GithubRepositoryIssue(Name alias, Table<GithubRepositoryIssueRecord> aliased) {
        this(alias, aliased, null);
    }

    private GithubRepositoryIssue(Name alias, Table<GithubRepositoryIssueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.github_repository_issue</code> table
     * reference
     */
    public GithubRepositoryIssue(String alias) {
        this(DSL.name(alias), GITHUB_REPOSITORY_ISSUE);
    }

    /**
     * Create an aliased <code>public.github_repository_issue</code> table
     * reference
     */
    public GithubRepositoryIssue(Name alias) {
        this(alias, GITHUB_REPOSITORY_ISSUE);
    }

    /**
     * Create a <code>public.github_repository_issue</code> table reference
     */
    public GithubRepositoryIssue() {
        this(DSL.name("github_repository_issue"), null);
    }

    public <O extends Record> GithubRepositoryIssue(Table<O> child, ForeignKey<O, GithubRepositoryIssueRecord> key) {
        super(child, key, GITHUB_REPOSITORY_ISSUE);
    }

    @Override
    @NotNull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public UniqueKey<GithubRepositoryIssueRecord> getPrimaryKey() {
        return Keys.GITHUB_REPOSITORY_ISSUE_PKEY;
    }

    @Override
    @NotNull
    public List<UniqueKey<GithubRepositoryIssueRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_GITHUB_REPOSITORY_ISSUE);
    }

    @Override
    @NotNull
    public List<ForeignKey<GithubRepositoryIssueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GITHUB_REPOSITORY_ISSUE__GITHUB_REPOSITORY_ISSUE_LINK_ID_FKEY);
    }

    private transient Link _link;

    /**
     * Get the implicit join path to the <code>public.link</code> table.
     */
    public Link link() {
        if (_link == null)
            _link = new Link(this, Keys.GITHUB_REPOSITORY_ISSUE__GITHUB_REPOSITORY_ISSUE_LINK_ID_FKEY);

        return _link;
    }

    @Override
    @NotNull
    public GithubRepositoryIssue as(String alias) {
        return new GithubRepositoryIssue(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public GithubRepositoryIssue as(Name alias) {
        return new GithubRepositoryIssue(alias, this);
    }

    @Override
    @NotNull
    public GithubRepositoryIssue as(Table<?> alias) {
        return new GithubRepositoryIssue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubRepositoryIssue rename(String name) {
        return new GithubRepositoryIssue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubRepositoryIssue rename(Name name) {
        return new GithubRepositoryIssue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public GithubRepositoryIssue rename(Table<?> name) {
        return new GithubRepositoryIssue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
